// ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥

// OAuth2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ê–≤–∏—Ç–æ
app.get('/auth/avito/callback', async (req, res) => {
    const code = req.query.code;

    try {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ URL
        const tokenResponse = await axios.post('https://oauth.avito.ru/token', {
            grant_type: 'authorization_code',
            client_id: process.env.CLIENT_ID,
            client_secret: process.env.CLIENT_SECRET,
            code: code,
            redirect_uri: process.env.REDIRECT_URI
        }, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
        });

        const accessToken = tokenResponse.data.access_token;
        console.log("üîë –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –ê–≤–∏—Ç–æ:", accessToken);

        res.send(`
            <h1>‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!</h1>
            <p>–¢–æ–∫–µ–Ω: ${accessToken}</p>
            <a href="/" class="btn btn-primary">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç</a>
        `);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ OAuth:", error.message);
        res.status(500).send("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + error.message);
    }
});

// API: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –ê–≤–∏—Ç–æ
app.post('/api/upload', async (req, res) => {
    if (!req.files || !req.files.file) {
        return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω" });
    }

    const file = req.files.file;
    const accessToken = "–°–Æ–î–ê_–¢–û–ö–ï–ù_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"; // ‚Üê –ü–æ–∑–∂–µ –±—É–¥–µ–º –±—Ä–∞—Ç—å –∏–∑ –ë–î

    try {
        const formData = new FormData();
        formData.append('file', file.data, file.name);

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ URL
        const uploadResponse = await axios.post('https://api.avito.ru/core/v1/items/upload', formData, {
            headers: {
                ...formData.getHeaders(),
                'Authorization': `Bearer ${accessToken}`
            }
        });

        res.json({ file_key: uploadResponse.data.file_key });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error.message);
        res.status(500).json({ error: error.message });
    }
});
