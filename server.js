const express = require('express');
const axios = require('axios');
const fileUpload = require('express-fileupload');
const path = require('path');
const { Client } = require('pg');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 10000;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
let client;

async function getConnection() {
    if (!client) {
        client = new Client({
            connectionString: process.env.SUPABASE_URL,
            ssl: true
        });
        await client.connect();
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Supabase");
    }
    return client;
}

// Middleware
app.use(express.static('.'));
app.use(express.json());
app.use(fileUpload());

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –°—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/login.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'login.html'));
});

app.get('/register.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'register.html'));
});

// API: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const dbClient = await getConnection();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞
        const checkResult = await dbClient.query(
            'SELECT * FROM users WHERE email = $1',
            [email]
        );

        if (checkResult.rows.length > 0) {
            return res.status(409).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await dbClient.query(
            'INSERT INTO users (email, password) VALUES ($1, $2)',
            [email, password]
        );

        console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:", email);
        res.json({ success: true });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.message);
        res.status(500).json({ error: error.message });
    }
});

// API: –í—Ö–æ–¥
app.post('/api/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const dbClient = await getConnection();

        const result = await dbClient.query(
            'SELECT * FROM users WHERE email = $1 AND password = $2',
            [email, password]
        );

        if (result.rows.length > 0) {
            console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª:", email);
            res.json({ success: true });
        } else {
            res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error.message);
        res.status(500).json({ error: error.message });
    }
});

// API: –í—ã—Ö–æ–¥
app.post('/api/logout', (req, res) => {
    res.json({ success: true });
});

// OAuth2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ê–≤–∏—Ç–æ
app.get('/auth/avito/callback', async (req, res) => {
    const code = req.query.code;

    try {
        // ‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ URL
        const tokenResponse = await axios.post('https://oauth.avito.ru/token', {
            grant_type: 'authorization_code',
            client_id: process.env.CLIENT_ID,
            client_secret: process.env.CLIENT_SECRET,
            code: code,
            redirect_uri: process.env.REDIRECT_URI
        }, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
        });

        const accessToken = tokenResponse.data.access_token;
        console.log("üîë –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –ê–≤–∏—Ç–æ:", accessToken);

        res.send(`
            <h1>‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!</h1>
            <p>–¢–æ–∫–µ–Ω: ${accessToken}</p>
            <a href="/" class="btn btn-primary">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç</a>
        `);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ OAuth:", error.message);
        res.status(500).send("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + error.message);
    }
});

// API: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –ê–≤–∏—Ç–æ
app.post('/api/upload', async (req, res) => {
    if (!req.files || !req.files.file) {
        return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω" });
    }

    const file = req.files.file;
    const accessToken = "–°–Æ–î–ê_–¢–û–ö–ï–ù_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"; // ‚Üê –ü–æ–∑–∂–µ –±—É–¥–µ–º –±—Ä–∞—Ç—å –∏–∑ –ë–î

    try {
        const formData = new FormData();
        formData.append('file', file.data, file.name);

        // ‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ URL
        const uploadResponse = await axios.post('https://api.avito.ru/core/v1/items/upload', formData, {
            headers: {
                ...formData.getHeaders(),
                'Authorization': `Bearer ${accessToken}`
            }
        });

        res.json({ file_key: uploadResponse.data.file_key });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error.message);
        res.status(500).json({ error: error.message });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
